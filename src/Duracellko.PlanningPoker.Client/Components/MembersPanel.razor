@inherits ViewComponentBase
@implements IDisposable
@inject PlanningPokerController Controller

<div class="membersPanel">
    <div class="card">
        <div class="card-header">@UIResources.MembersPanel_ScrumMasterLabel</div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item">
                <span>@Controller.ScrumMaster?.Name</span>
                @if ((Controller.ScrumMaster?.HasEstimated).GetValueOrDefault())
                {
                    <span class="text-success ms-1">
                        <span class="oi oi-task" title="@UIResources.MembersPanel_MemberHasVotedTooltip" aria-hidden="true"></span>
                    </span>
                }
            </li>
        </ul>

        <div class="card-header">
            @UIResources.MembersPanel_MembersLabel
            @if (!string.IsNullOrEmpty(Controller.MembersCount))
            {
                <div class="float-end">
                    <small><span class="badge rounded-pill text-bg-secondary">@Controller.MembersCount</span></small>
                </div>
            }
        </div>
        <ul class="list-group list-group-flush">
            @foreach (var member in Controller.Members)
            {
                <li class="list-group-item">
                    <span>@member.Name</span>
                    @if (member.HasEstimated)
                    {
                        <span class="text-success ms-1">
                            <span class="oi oi-task" title="@UIResources.MembersPanel_MemberHasVotedTooltip" aria-hidden="true"></span>
                        </span>
                    }
                    @if (Controller.IsScrumMaster)
                    {
                        <button type="button" @onclick="@(e => KickoffMemberCommand(member.Name))" class="btn btn-outline-danger float-end remove-member-btn"
                                aria-label="@UIResources.MembersPanel_RemoveButtonTooltip">
                            <span class="fw-bold" aria-hidden="true">&times;</span>
                        </button>
                    }
                </li>
            }
        </ul>

        <div class="card-header">
            @UIResources.MembersPanel_ObserversLabel
            @if (Controller.Observers.Any())
            {
                <div class="float-end">
                    <small><span class="badge rounded-pill text-bg-secondary">@Controller.Observers.Count()</span></small>
                </div>
            }
        </div>
        <ul class="list-group list-group-flush">
            @foreach (var observer in Controller.Observers)
            {
                <li class="list-group-item">
                    <span>@observer.Name</span>
                    @if (Controller.IsScrumMaster)
                    {
                        <button type="button" @onclick="@(e => KickoffMemberCommand(observer.Name))" class="btn btn-outline-danger float-end remove-member-btn"
                                aria-label="@UIResources.MembersPanel_RemoveButtonTooltip">
                            <span class="fw-bold" aria-hidden="true">&times;</span>
                        </button>
                    }
                </li>
            }
        </ul>

        @if (RemainingTimerTime != null)
        {
            <div class="card-header">@UIResources.MembersPanel_TimerLabel</div>
            <ul class="list-group list-group-flush">
                <li class="list-group-item text-center">
                    <p class="h2">@RemainingTimerTime</p>
                </li>
            </ul>
        }
    </div>
</div>

@code
{
    private string? RemainingTimerTime
    {
        get
        {
            var remainingTimerTime = Controller.RemainingTimerTime;
            if (remainingTimerTime == null)
            {
                return null;
            }

            var format = remainingTimerTime.Value.Hours > 0 ? @"hh\:mm\:ss" : @"mm\:ss";
            return remainingTimerTime.Value.ToString(format);
        }
    }

    public void Dispose()
    {
        Controller.PropertyChanged -= ControllerOnPropertyChanged;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Controller.PropertyChanged += ControllerOnPropertyChanged;
    }

    private Task KickoffMemberCommand(string member)
    {
        return TryRun(() => Controller.DisconnectMember(member));
    }

    private void ControllerOnPropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        StateHasChanged();
    }
}
