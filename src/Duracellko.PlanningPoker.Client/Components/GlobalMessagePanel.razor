@implements IDisposable
@inject UI.MessageBoxService _messageBoxService
@inject IJSRuntime _jsRuntime

<div @ref="messageBoxElement" id="messageBox" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="btn-close" @onclick="CloseDialog" aria-label="@UIResources.GlobalMessage_CloseButtonTooltip"></button>
            </div>
            <div class="modal-body">
                <p>@Message</p>
            </div>
            <div class="modal-footer">
                @if (PrimaryButtonText != null)
                {
                    <button type="button" class="btn btn-primary" @onclick="PrimaryCommand">@PrimaryButtonText</button>
                }
                <button type="button" class="btn btn-secondary" @onclick="CloseDialog">@UIResources.GlobalMessage_CloseButton</button>
            </div>
        </div>
    </div>
</div>

@code
{
    private ElementReference messageBoxElement;

    private TaskCompletionSource<bool>? _showMessageTask;

    private string Message { get; set; } = string.Empty;

    private string? Title { get; set; }

    private string? PrimaryButtonText { get; set; }

    public void Dispose()
    {
        _messageBoxService.SetMessageHandler(null);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _messageBoxService.SetMessageHandler(ShowMessage);
    }

    private async Task<bool> ShowMessage(string message, string? title, string? primaryButton)
    {
        Message = message;
        Title = title;
        PrimaryButtonText = primaryButton;

        StateHasChanged();

        var showMessageTask = new TaskCompletionSource<bool>();
        _showMessageTask = showMessageTask;
        await ShowDialog();
        return await showMessageTask.Task;
    }

    private async Task CloseDialog()
    {
        await HideDialog();
        EndShowMessageTask(false);
    }

    private async Task PrimaryCommand()
    {
        await HideDialog();
        EndShowMessageTask(true);
    }

    private void EndShowMessageTask(bool result)
    {
        if (_showMessageTask != null)
        {
            _showMessageTask.SetResult(result);
            _showMessageTask = null;
        }
    }

    private async Task ShowDialog()
    {
        await _jsRuntime.InvokeAsync<object>("Duracellko.PlanningPoker.showMessageBox", messageBoxElement);
    }

    private async Task HideDialog()
    {
        await _jsRuntime.InvokeAsync<object>("Duracellko.PlanningPoker.hide", messageBoxElement);
    }
}
