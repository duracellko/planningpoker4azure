@using System.Globalization
@inherits ViewComponentBase
@implements IDisposable
@inject PlanningPokerController Controller

<div class="pokerDeskPanel">

    <div id="timerSetupModal" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true" aria-labelledby="timerSetupModalTitle">
        <div class="modal-dialog modal-sm" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="timerSetupModalTitle">Temporizador</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label>Duração do temporizador</label>
                            <div class="input-group">
                                <select class="custom-select form-control text-right" @onchange="OnTimerDurationMinutesSelectChanged" aria-label="minutes">
                                    @for (int i = 0; i < 60; i++)
                                    {
                                        @if (i == TimerDurationMinutes)
                                        {
                                            <option value="@i.ToString(CultureInfo.InvariantCulture)" selected>@i</option>
                                        }
                                        else
                                        {
                                            <option value="@i.ToString(CultureInfo.InvariantCulture)">@i</option>
                                        }
                                    }
                                </select>
                                <div class="input-group-append">
                                    <span class="input-group-text">m</span>
                                </div>
                                <select class="custom-select form-control text-right" @onchange="OnTimerDurationSecondsSelectChanged" aria-label="seconds">
                                    @for (int i = 0; i < 60; i++)
                                    {
                                        @if (i == TimerDurationSeconds)
                                        {
                                            <option value="@i.ToString(CultureInfo.InvariantCulture)" selected>@i</option>
                                        }
                                        else
                                        {
                                            <option value="@i.ToString(CultureInfo.InvariantCulture)">@i</option>
                                        }
                                    }
                                </select>
                                <div class="input-group-append">
                                    <span class="input-group-text">s</span>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Fechar</button>
                </div>
            </div>
        </div>
    </div>

    <div class="team-title">
        <h2>
            <span class="badge badge-secondary"><span class="oi oi-people" title="Team" aria-hidden="true"></span></span>
            <span>@Controller.TeamName</span>
        </h2>
        <h3>
            <span class="badge badge-secondary"><span class="oi oi-person" title="User" aria-hidden="true"></span></span>
            <span>@Controller.User?.Name</span>
        </h3>
    </div>

    @if (Controller.CanSelectEstimation)
    {
        <div class="availableEstimations">
            <h3>Escolha a estimativa</h3>
            <ul>
                @foreach (var estimation in Controller.AvailableEstimations)
                {
                    <li><a @onclick="@(e => SelectEstimationCommand(estimation))">@GetEstimationText(estimation)</a></li>
                }
            </ul>
        </div>
    }

    @if (Controller.IsScrumMaster || Controller.CanShowEstimationSummary || Controller.CanStartTimer || Controller.CanStopTimer)
    {
        <div class="actionsBar">
            <p>
                @if (Controller.CanStartEstimation)
                {
                    <button type="button" @onclick="StartEstimationCommand" class="btn btn-primary mr-3">
                        <span class="oi oi-media-play mr-1" aria-hidden="true"></span> Iniciar estimativa
                    </button>
                }

                @if (Controller.CanCancelEstimation)
                {
                    <button type="button" @onclick="CancelEstimationCommand" class="btn btn-secondary mr-3">
                        <span class="oi oi-media-stop mr-1" aria-hidden="true"></span> Cancelar estimativa
                    </button>
                }

                @if (Controller.CanShowEstimationSummary)
                {
                    <button type="button" @onclick="ShowEstimationSummaryCommand" class="btn btn-secondary mr-3">
                        <span class="oi oi-calculator mr-1" aria-hidden="true"></span> Mostrar média
                    </button>
                }

                @if (Controller.CanStartTimer)
                {
                    <button type="button" @onclick="StartTimerCommand" class="btn btn-secondary mr-3">
                        <span class="oi oi-timer mr-1" aria-hidden="true"></span> Iniciar temporizador
                    </button>
                    <button type="button" class="btn btn-secondary mr-3" data-toggle="modal" data-target="#timerSetupModal">
                        <span class="oi oi-cog mr-1" aria-hidden="true"></span> Configurar temporizador
                    </button>
                }

                @if (Controller.CanStopTimer)
                {
                    <button type="button" @onclick="CancelTimerCommand" class="btn btn-secondary mr-3">
                        <span class="oi oi-action-undo mr-1" aria-hidden="true"></span> Parar temporizador
                    </button>
                }
            </p>
        </div>
    }

    @if (HasEstimationResult)
    {
        <div class="estimationResult">
            <h3>Estimativas selecionadas</h3>

            @if (Controller.EstimationSummary != null)
            {
                <div class="estimationSummary row">
                    <div class="col-md-6">
                        <div class="estimationSummaryItem">
                            <div class="estimationSummaryTitle">Média</div>
                            <div class="estimationSummaryValue">
                                @FormatSummaryValue(Controller.EstimationSummary.Average)
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="estimationSummaryItem">
                            <div class="estimationSummaryTitle">Mediana</div>
                            <div class="estimationSummaryValue">
                                @FormatSummaryValue(Controller.EstimationSummary.Median)
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="estimationSummaryItem">
                            <div class="estimationSummaryTitle">Soma</div>
                            <div class="estimationSummaryValue">
                                @FormatSummaryValue(Controller.EstimationSummary.Sum)
                            </div>
                        </div>
                    </div>
                </div>
            }

            <ul>
                @foreach (var memberEstimation in Controller.Estimations!)
                {
                    <li>
                        <span class="estimationItemValue">@(memberEstimation.HasEstimation ? GetEstimationText(memberEstimation.Estimation) : null)</span>
                        <span class="estimationItemName">@memberEstimation.MemberName</span>
                    </li>
                }
            </ul>
        </div>
    }
</div>

@code
{
    private int _timerDuractionMinutes = 5;
    private int _timerDurationSeconds = 0;

    private bool HasEstimationResult => Controller.Estimations != null;

    private int TimerDurationMinutes
    {
        get => _timerDuractionMinutes;
        set
        {
            value = EnsureTimePartIsInRange(value);
            if (value == 0 && _timerDurationSeconds == 0)
            {
                _timerDurationSeconds = 1;
            }

            _timerDuractionMinutes = value;
        }
    }

    private int TimerDurationSeconds
    {
        get => _timerDurationSeconds;
        set
        {
            value = EnsureTimePartIsInRange(value);
            if (value == 0 && _timerDuractionMinutes == 0)
            {
                _timerDuractionMinutes = 1;
            }

            _timerDurationSeconds = value;
        }
    }

    public void Dispose()
    {
        Controller.PropertyChanged -= ControllerOnPropertyChanged;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Controller.PropertyChanged += ControllerOnPropertyChanged;

        TimerDurationMinutes = Controller.TimerDuration.Minutes;
        TimerDurationSeconds = Controller.TimerDuration.Seconds;
    }

    private Task SelectEstimationCommand(double? estimation)
    {
        return TryRun(() => Controller.SelectEstimation(estimation));
    }

    private Task StartEstimationCommand()
    {
        return TryRun(() => Controller.StartEstimation());
    }

    private Task CancelEstimationCommand()
    {
        return TryRun(() => Controller.CancelEstimation());
    }

    private void ShowEstimationSummaryCommand()
    {
        Controller.ShowEstimationSummary();
    }

    private Task StartTimerCommand()
    {
        return TryRun(() => Controller.StartTimer());
    }

    private Task CancelTimerCommand()
    {
        return TryRun(() => Controller.CancelTimer());
    }

    private void OnTimerDurationMinutesSelectChanged(ChangeEventArgs e)
    {
        TimerDurationMinutes = e.Value != null ? int.Parse(e.Value.ToString()!, CultureInfo.InvariantCulture) : 5;
        Controller.TimerDuration = new TimeSpan(0, TimerDurationMinutes, TimerDurationSeconds);
    }

    private void OnTimerDurationSecondsSelectChanged(ChangeEventArgs e)
    {
        TimerDurationSeconds = e.Value != null ? int.Parse(e.Value.ToString()!, CultureInfo.InvariantCulture) : 0;
        Controller.TimerDuration = new TimeSpan(0, TimerDurationMinutes, TimerDurationSeconds);
    }

    private void ControllerOnPropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        TimerDurationMinutes = Controller.TimerDuration.Minutes;
        TimerDurationSeconds = Controller.TimerDuration.Seconds;

        StateHasChanged();
    }

    private static string GetEstimationText(double? estimation)
    {
        if (estimation == null)
        {
            return "?";
        }

        var value = estimation.Value;
        if (double.IsPositiveInfinity(value))
        {
            return "\u221E";
        }
        else if (value == 0.5)
        {
            return "\u00BD";
        }
        else if (value == -999509.0)
        {
            return "PP";
        }
        else if (value == -999508.0)
        {
            return "P";
        }
        else if (value == -999507.0)
        {
            return "M";
        }
        else if (value == -999506.0)
        {
            return "G";
        }
        else if (value == -999505.0)
        {
            return "GG";
        }
        else if (value == -999909.0)
        {
            // 💎 Pedra
            return "\uD83D\uDC8E";
        }
        else if (value == -999908.0)
        {
            // 📜 Papel
            return "\uD83D\uDCDC";
        }
        else if (value == -999907.0)
        {
            // ✂ Tesoura
            return "\u2702";
        }
        else if (value == -999906.0)
        {
            // 🦎 Lagarto
            return "\uD83E\uDD8E";
        }
        else if (value == -999905.0)
        {
            // 🖖 Spock
            return "\uD83D\uDD96";
        }
        else
        {
            return value.ToString();
        }
    }

    private static string FormatSummaryValue(double? value)
    {
        if (!value.HasValue)
        {
            return string.Empty;
        }

        return value.Value.ToString("N2");
    }

    private static int EnsureTimePartIsInRange(int value)
    {
        if (value < 0)
        {
            value = 0;
        }
        else if (value > 59)
        {
            value = 59;
        }

        return value;
    }
}
