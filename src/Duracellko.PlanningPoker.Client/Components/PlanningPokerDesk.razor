@using System.Globalization
@inherits ViewComponentBase
@implements IDisposable
@inject PlanningPokerController Controller

<div class="pokerDeskPanel">

    <div class="team-title">
        <h2>
            <span class="badge bg-secondary">
                <span class="oi oi-people" title="@UIResources.PlanningPokerDesk_TeamTooltip" aria-hidden="true"></span>
            </span>
            <span>@Controller.TeamName</span>
        </h2>
        <h3>
            <span class="badge bg-secondary">
                <span class="oi oi-person" title="@UIResources.PlanningPokerDesk_UserTooltip" aria-hidden="true"></span>
            </span>
            <span>@Controller.User?.Name</span>
        </h3>
    </div>

    @if (Controller.IsScrumMaster || Controller.CanShowEstimationSummary || Controller.CanStartTimer || Controller.CanStopTimer)
    {
        <div class="actionsBar container">
            <p class="row justify-content-md-start gy-3">
                @if (Controller.CanStartEstimation)
                {
                    <button type="button" @onclick="StartEstimationCommand" class="btn btn-primary col-md-auto me-3">
                        <span class="oi oi-media-play me-1" aria-hidden="true"></span>
                        @UIResources.PlanningPokerDesk_StartEstimationButton
                    </button>
                }

                @if (Controller.CanCancelEstimation)
                {
                    <button type="button" @onclick="CancelEstimationCommand" class="btn btn-secondary col-md-auto me-3">
                        <span class="oi oi-media-stop me-1" aria-hidden="true"></span>
                        @UIResources.PlanningPokerDesk_CancelEstimationButton
                    </button>
                }

                @if (Controller.CanShowEstimationSummary)
                {
                    <button type="button" @onclick="ShowEstimationSummaryCommand" class="btn btn-secondary col-md-auto me-3">
                        <span class="oi oi-calculator me-1" aria-hidden="true"></span>
                        @UIResources.PlanningPokerDesk_ShowAverageButton
                    </button>
                }

                @if (Controller.CanStartTimer)
                {
                    <button type="button" @onclick="StartTimerCommand" class="btn btn-secondary col-md-auto me-3">
                        <span class="oi oi-timer me-1" aria-hidden="true"></span>
                        @UIResources.PlanningPokerDesk_StartTimerButton
                    </button>
                }

                @if (Controller.CanStopTimer)
                {
                    <button type="button" @onclick="CancelTimerCommand" class="btn btn-secondary col-md-auto me-3">
                        <span class="oi oi-action-undo me-1" aria-hidden="true"></span>
                        @UIResources.PlanningPokerDesk_StopTimerButton
                    </button>
                }
            </p>
        </div>
    }

    @if (Controller.CanSelectEstimation)
    {
        <div class="availableEstimations">
            <h3>@UIResources.PlanningPokerDesk_PickEstimationLabel</h3>
            <ul>
                @foreach (var estimation in Controller.AvailableEstimations)
                {
                    <li><a @onclick="@(e => SelectEstimationCommand(estimation))">@GetEstimationText(estimation)</a></li>
                }
            </ul>
        </div>
    }

    @if (Controller.CanSelectEstimation && HasEstimationResult)
    {
        <hr class="border border-primary border-2 opacity-75">
    }

    @if (HasEstimationResult)
    {
        <div class="estimationResult">
            <h3>@UIResources.PlanningPokerDesk_SelectedEstimatesLabel</h3>

            @if (Controller.EstimationSummary != null)
            {
                <div class="estimationSummary row">
                    <div class="col-md">
                        <div class="card border-primary mb-2">
                            <div class="card-header text-bg-primary">@UIResources.PlanningPokerDesk_AverageLabel</div>
                            <div class="card-body text-end fw-bold pt-2 pb-2">
                                @FormatSummaryValue(Controller.EstimationSummary.Average)
                            </div>
                            @if (Controller.CanPostEstimationResult(EstimationSummaryFunction.Average))
                            {
                                <div class="card-footer border border-0 text-end">
                                    <button type="button" @onclick="@(e => SubmitEstimationSummaryCommand(EstimationSummaryFunction.Average))"
                                            class="btn btn-secondary btn-sm">
                                        @UIResources.PlanningPokerDesk_SubmitEstimationSummary
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="col-md">
                        <div class="card border-primary mb-2">
                            <div class="card-header text-bg-primary">@UIResources.PlanningPokerDesk_MedianLabel</div>
                            <div class="card-body text-end fw-bold pt-2 pb-2">
                                @FormatSummaryValue(Controller.EstimationSummary.Median)
                            </div>
                            @if (Controller.CanPostEstimationResult(EstimationSummaryFunction.Median))
                            {
                                <div class="card-footer border border-0 text-end">
                                    <button type="button" @onclick="@(e => SubmitEstimationSummaryCommand(EstimationSummaryFunction.Median))"
                                            class="btn btn-secondary btn-sm">
                                        @UIResources.PlanningPokerDesk_SubmitEstimationSummary
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="col-md">
                        <div class="card border-primary mb-2">
                            <div class="card-header text-bg-primary">@UIResources.PlanningPokerDesk_SumLabel</div>
                            <div class="card-body text-end fw-bold pt-2 pb-2">
                                @FormatSummaryValue(Controller.EstimationSummary.Sum)
                            </div>
                            @if (Controller.CanPostEstimationResult(EstimationSummaryFunction.Sum))
                            {
                                <div class="card-footer border border-0 text-end">
                                    <button type="button" @onclick="@(e => SubmitEstimationSummaryCommand(EstimationSummaryFunction.Sum))"
                                            class="btn btn-secondary btn-sm">
                                        @UIResources.PlanningPokerDesk_SubmitEstimationSummary
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }

            <ul>
                @foreach (var memberEstimation in Controller.Estimations!)
                {
                    <li>
                        <span class="estimationItemValue">@(memberEstimation.HasEstimation ? GetEstimationText(memberEstimation.Estimation) : null)</span>
                        <span class="estimationItemName">@memberEstimation.MemberName</span>
                    </li>
                }
            </ul>
        </div>
    }
</div>

@code
{
    private bool HasEstimationResult => Controller.Estimations != null;

    public void Dispose()
    {
        Controller.PropertyChanged -= ControllerOnPropertyChanged;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Controller.PropertyChanged += ControllerOnPropertyChanged;
    }

    private Task SelectEstimationCommand(double? estimation)
    {
        return TryRun(() => Controller.SelectEstimation(estimation));
    }

    private Task StartEstimationCommand()
    {
        return TryRun(() => Controller.StartEstimation());
    }

    private Task CancelEstimationCommand()
    {
        return TryRun(() => Controller.CancelEstimation());
    }

    private void ShowEstimationSummaryCommand()
    {
        Controller.ShowEstimationSummary();
    }

    private Task StartTimerCommand()
    {
        return TryRun(() => Controller.StartTimer());
    }

    private Task CancelTimerCommand()
    {
        return TryRun(() => Controller.CancelTimer());
    }

    private Task SubmitEstimationSummaryCommand(EstimationSummaryFunction function)
    {
        return TryRun(() => Controller.PostEstimationResult(function));
    }

    private void ControllerOnPropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        StateHasChanged();
    }

    private static string GetEstimationText(double? estimation)
    {
        if (estimation == null)
        {
            return Resources.Estimation_QuestionMark;
        }

        var value = estimation.Value;
        if (double.IsPositiveInfinity(value))
        {
            return Resources.Estimation_Infinity;
        }

        return value switch
        {
            0.5 => Resources.Estimation_Half,
            -999509.0 => Resources.Estimation_XS,
            -999508.0 => Resources.Estimation_S,
            -999507.0 => Resources.Estimation_M,
            -999506.0 => Resources.Estimation_L,
            -999505.0 => Resources.Estimation_XL,
            -999909.0 => Resources.Estimation_Rock,
            -999908.0 => Resources.Estimation_Paper,
            -999907.0 => Resources.Estimation_Scissors,
            -999906.0 => Resources.Estimation_Lizard,
            -999905.0 => Resources.Estimation_Spock,
            _ => value.ToString()
        };
    }

    private static string FormatSummaryValue(double? value) => value.HasValue ? value.Value.ToString("N2") : "\u00A0";
}
