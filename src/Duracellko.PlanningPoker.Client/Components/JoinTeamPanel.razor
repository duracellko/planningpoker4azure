@inherits ViewComponentBase
@inject JoinTeamController Controller

<div class="card">
    <h5 class="card-header">@UIResources.JoinTeam_Header</h5>
    <div class="card-body">
        <form name="joinTeam" action="." @onsubmit="JoinTeamCommand">
            <div class="mb-3">
                <label for="joinTeam$teamName" class="form-label">@UIResources.JoinTeam_TeamNameLabel:</label>
                <input type="text" id="joinTeam$teamName" name="teamName" @bind="TeamName"
                       class="@GetFormControlCss(IsTeamNameValid)" maxlength="50" />
                @if (!IsTeamNameValid)
                {
                    <span class="invalid-feedback">@UIResources.JoinTeam_RequiredLabel</span>
                }
            </div>
            <div class="mb-3">
                <label for="joinTeam$memberName" class="form-label">@UIResources.JoinTeam_MemberNameLabel:</label>
                <input type="text" id="joinTeam$memberName" name="memberName" @bind="MemberName"
                       class="@GetFormControlCss(IsMemberNameValid)" maxlength="50" />
                @if (!IsMemberNameValid)
                {
                    <span class="invalid-feedback">@UIResources.JoinTeam_RequiredLabel</span>
                }
            </div>
            <div class="mb-3 form-check">
                <input type="checkbox" id="joinTeam$asObserver" name="asObserver" @bind="AsObserver" class="form-check-input" />
                <label for="joinTeam$asObserver" class="form-check-label">@UIResources.JoinTeam_AsObserverLabel</label>
            </div>
            <button type="submit" id="joinTeam$submit" class="btn btn-primary">@UIResources.JoinTeam_JoinTeamButton</button>
        </form>
    </div>
    <div class="card-footer">
        <small>
            <strong>@UIResources.JoinTeam_TipLabel:</strong> @UIResources.JoinTeam_TipText
        </small>
    </div>
</div>

@code
{
    [Parameter]
    public string? TeamName { get; set; }

    [Parameter]
    public string? MemberName { get; set; }

    private bool AsObserver { get; set; }

    private bool IsTeamNameValid => TeamName == null || !string.IsNullOrWhiteSpace(TeamName);

    private bool IsMemberNameValid => MemberName == null || !string.IsNullOrWhiteSpace(MemberName);

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        bool hasReconnected = false;
        if (!string.IsNullOrEmpty(TeamName) && !string.IsNullOrEmpty(MemberName))
        {
            try
            {
                hasReconnected = await Controller.TryAutoConnectTeam(TeamName, MemberName);
            }
            catch (Exception)
            {
                // Ignore error. User can connect manually.
            }

            // Automatic join fails, when team is not created yet. Let user wait and join with the requested member name.
            // Otherwise restore user's stored user name.
            if (!Controller.JoinAutomatically)
            {
                MemberName = null;
            }
        }

        if (!hasReconnected)
        {
            await SetDefaultValues();
        }
    }

    private Task JoinTeamCommand()
    {
        if (TeamName == null)
        {
            TeamName = string.Empty;
        }

        if (MemberName == null)
        {
            MemberName = string.Empty;
        }

        return TryRun(() => Controller.JoinTeam(TeamName, MemberName, AsObserver));
    }

    private async Task SetDefaultValues()
    {
        var memberCredentials = await Controller.GetCredentials();
        if (memberCredentials != null)
        {
            if (string.IsNullOrEmpty(TeamName))
            {
                TeamName = memberCredentials.TeamName;
            }

            if (string.IsNullOrEmpty(MemberName))
            {
                MemberName = memberCredentials.MemberName;
            }
        }
    }

    private static string GetFormControlCss(bool valid) => valid ? "form-control" : "form-control is-invalid";
}
