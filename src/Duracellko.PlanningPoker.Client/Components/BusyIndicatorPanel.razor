@implements IDisposable
@inject UI.BusyIndicatorService _busyIndicatorService
@inject IJSRuntime _jsRuntime

<div @ref="busyIndicatorElement" class="modal" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-sm">
        <div class="modal-content">
            <div class="modal-body">
                <p class="modal-title">Em processamento...</p>
            </div>
        </div>
    </div>
</div>

@code
{
    private ElementReference busyIndicatorElement;

    public void Dispose()
    {
        _busyIndicatorService.SetBusyIndicatorHandler(null);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _busyIndicatorService.SetBusyIndicatorHandler(SetVisibility);
    }

    private async void SetVisibility(bool visible)
    {
        StateHasChanged();
        if (visible)
        {
            await _jsRuntime.InvokeAsync<object>("Duracellko.PlanningPoker.showBusyIndicator", busyIndicatorElement);
        }
        else
        {
            await _jsRuntime.InvokeAsync<object>("Duracellko.PlanningPoker.hide", busyIndicatorElement);
        }
    }
}
