@inherits ViewComponentBase
@implements IDisposable
@inject PlanningPokerController Controller
@inject NavigationManager NavigationManager

<nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
    <div class="container">
        <a class="navbar-brand" onclick=location.reload(true)>Planning Poker</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse">
            @if (IsConnected)
            {
                <ul class="navbar-nav flex-grow-1 justify-content-end">
                    <li class="nav-item">
                        <a @onclick="DisconnectCommand">
                            <span class="oi oi-account-logout"></span> Desconectar
                        </a>
                    </li>
                </ul>
            }
        </div>
    </div>
</nav>

@code
{
    private bool IsConnected => Controller.IsConnected;

    public void Dispose()
    {
        Controller.PropertyChanged -= ControllerOnPropertyChanged;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Controller.PropertyChanged += ControllerOnPropertyChanged;
    }

    private Task DisconnectCommand()
    {
        return TryRun(async () =>
        {
            await Controller.Disconnect();
            NavigationManager.NavigateTo("Index");
        });
    }

    private void ControllerOnPropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(Controller.IsConnected))
        {
            StateHasChanged();
        }
    }
}
